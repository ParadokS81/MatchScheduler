# Project Protocols v2.0 - Technical Standards

**Purpose:** Detailed technical guidance, patterns, and standards for implementation

## üîç DEBUGGING WORKFLOW - COMPREHENSIVE PROTOCOL

### **Phase 1: ANALYSIS** (No Code Changes)
**Mandatory first step - understand before acting**

#### **Problem Documentation:**
- Document exact error message or unexpected behavior
- Identify specific function/component involved
- Trace logical flow of affected component
- Look for related previous bugs or known issues
- Record input values and expected vs. actual outcomes

#### **Environmental Analysis:**
- Check execution context (Script Editor vs. Sheet vs. Sidebar)
- Examine data types and formatting issues
- Consider timing/sequence problems
- Check for browser/platform-specific issues

### **Phase 2: INVESTIGATION** (Still No Code Changes)
**Root cause identification with evidence**

#### **Systematic Investigation:**
- List 2-3 most likely causes with reasoning
- Check for environmental factors
- Examine related functions for similar patterns
- Test assumptions with manual verification
- Ask clarifying questions before proceeding

#### **Evidence Gathering:**
- Collect relevant log outputs
- Document current system state
- Identify what works vs. what doesn't
- Map dependencies and interactions

### **Phase 3: SOLUTION DESIGN & IMPLEMENTATION**
**Focused solutions with approval gate**

#### **Solution Prioritization:**
1. **Simple fixes** (parameter adjustments, minor logic corrections)
2. **Targeted debugging code** (only in specific function)
3. **Structural changes** (only if necessary)

#### **Implementation Process:**
- Present solution options with expected outcomes
- Include error handling appropriate for execution context
- **Wait for explicit approval** before implementing changes
- Make minimal edits to fix the issue
- Verify fix works as expected

## üõ†Ô∏è DEBUG.GS INTEGRATION STANDARDS

### **Function Naming Convention:**
```javascript
// Pattern: debug[Feature][Issue]()
function debugSlotAdoption() { }           // General feature debug
function debugSlotAdoptionAuth() { }       // Auth-specific debug
function debugGridProtectionUI() { }       // UI-specific debug
function debugBlockDetectionCache() { }    // Cache-specific debug
```

### **Standard Debug Function Template:**
```javascript
/**
 * Debug function for [Feature] [Issue]
 * Run from Script Editor or add to Debug menu for UI access
 */
function debug[Feature][Issue]() {
  try {
    Logger.log("=== DEBUG: [Feature] [Issue] START ===");
    
    // 1. Document current state
    Logger.log("Current state: " + JSON.stringify(currentState));
    
    // 2. Test specific functionality
    const testResult = testSpecificFunction();
    Logger.log("Test result: " + testResult);
    
    // 3. Identify discrepancies
    const expected = getExpectedResult();
    const actual = getActualResult();
    Logger.log("Expected: " + expected);
    Logger.log("Actual: " + actual);
    Logger.log("Match: " + (expected === actual));
    
    // 4. Return structured results
    const results = {
      success: (expected === actual),
      expected: expected,
      actual: actual,
      error: null
    };
    
    Logger.log("=== DEBUG: [Feature] [Issue] COMPLETE ===");
    return results;
    
  } catch (e) {
    Logger.log("=== DEBUG ERROR: " + e.message + " ===");
    Logger.log("Stack trace: " + e.stack);
    return {
      success: false,
      error: e.message,
      stack: e.stack
    };
  }
}
```

### **UI-Accessible Debug Functions:**
```javascript
/**
 * UI-friendly version for menu access
 */
function debug[Feature][Issue]UI() {
  try {
    const result = debug[Feature][Issue]();
    
    let message = `üß™ DEBUG: [Feature] [Issue]\n\n`;
    if (result.success) {
      message += `‚úÖ SUCCESS\n`;
      message += `Expected: ${result.expected}\n`;
      message += `Actual: ${result.actual}`;
    } else {
      message += `‚ùå FAILED\n`;
      message += `Error: ${result.error || 'Unknown error'}`;
    }
    
    SpreadsheetApp.getUi().alert("Debug Results", message, SpreadsheetApp.getUi().ButtonSet.OK);
    return result.success;
    
  } catch (e) {
    SpreadsheetApp.getUi().alert("Debug Error", "Error running debug function: " + e.message, SpreadsheetApp.getUi().ButtonSet.OK);
    return false;
  }
}
```

## üìã ERROR HANDLING PATTERNS

### **Script Editor Context:**
```javascript
function scriptEditorFunction() {
  try {
    // Function logic
    Logger.log("Result: " + result);
    return result;
  } catch (e) {
    Logger.log("ERROR in scriptEditorFunction: " + e.message);
    console.error(e); // Shows stack trace in console
    return false;
  }
}
```

### **Menu Function Context:**
```javascript
function menuTriggeredFunction() {
  try {
    // Function logic
    return true;
  } catch (e) {
    SpreadsheetApp.getUi().alert("Error", "Operation failed: " + e.message, SpreadsheetApp.getUi().ButtonSet.OK);
    Logger.log("Error in menuTriggeredFunction: " + e.message);
    return false;
  }
}
```

### **Sidebar Callback Context:**
```javascript
// In server-side function called from sidebar
function sidebarServerFunction(params) {
  try {
    // Function logic
    return {success: true, data: result};
  } catch (e) {
    Logger.log("Error in sidebarServerFunction: " + e.message);
    return {success: false, error: e.message};
  }
}

// In sidebar HTML JavaScript
google.script.run
  .withSuccessHandler(function(result) {
    if (result.success) {
      // Handle success
    } else {
      alert("Error: " + result.error);
    }
  })
  .withFailureHandler(function(error) {
    alert("System error: " + error);
  })
  .sidebarServerFunction(params);
```

## üèóÔ∏è CODE ARCHITECTURE STANDARDS

### **Version Control Integration:**
```javascript
/**
 * [File Name] - [Description]
 * 
 * @version x.y.z (YYYY-MM-DD)
 * 
 * Description: [What this file does]
 * UPDATED: [Recent changes]
 */
```

### **Function Documentation:**
```javascript
/**
 * [Brief description of what function does]
 * @param {Type} paramName - Parameter description
 * @return {Type} Return value description
 */
function functionName(paramName) {
  // Implementation
}
```

### **Constants and Configuration:**
- Use existing `BLOCK_CONFIG` patterns for new configuration
- Maintain backward compatibility with existing constants
- Document any breaking changes clearly

## üö® COMMON GOTCHAS & SOLUTIONS

### **Google Sheets API Limitations:**
- **Batch Operations:** Always use `getValues()/setValues()` for ranges instead of individual cells
- **Execution Time:** Script execution limited to 6 minutes - break long operations into chunks
- **Trigger Timing:** Time-based triggers may not fire exactly on time
- **Property Size:** Document properties have size limitations

### **Apps Script Quirks:**
- **Browser Storage:** `localStorage`/`sessionStorage` NOT supported in artifacts
- **Sidebar Communication:** Must use `google.script.run` for all server communication
- **Caching:** Improves performance but has expiration limits
- **Error Handling:** Different patterns needed for different execution contexts

### **Project-Specific Patterns:**
- **Block Detection:** Cache results to avoid repeated expensive operations
- **Color Application:** Batch updates for performance
- **Team Data:** Always validate structure before processing
- **Slot Management:** Check authentication status before slot operations

## üìä PERFORMANCE OPTIMIZATION

### **Batch Processing:**
```javascript
// Good - batch operation
const range = sheet.getRange("A1:D10");
const values = range.getValues();
// Process values in memory
range.setValues(modifiedValues);

// Bad - individual cell operations  
for (let i = 1; i <= 10; i++) {
  sheet.getRange(i, 1).setValue(newValue); // Expensive API call each time
}
```

### **Caching Strategies:**
- Cache expensive operations (block detection, team data)
- Use timestamps to invalidate stale cache
- Clear cache when underlying data changes

### **Memory Management:**
- Process large datasets in chunks
- Clean up temporary variables in long-running functions
- Use early returns to avoid unnecessary processing

---

**These protocols provide the technical foundation. Project Instructions define universal rules. Conversation Prompts control specific workflow behavior.**